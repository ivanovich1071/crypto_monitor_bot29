from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler
from src.database import add_user, update_user_thresholds, get_user_thresholds
from src.notifier import format_message
from src.poloniex_api import get_ticker_data
from src.data_processing import find_significant_drops
from src.telegram_bot import send_telegram_message
import logging

logger = logging.getLogger(__name__)

def setup_handlers(updater):
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(CommandHandler("report", report))

def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    add_user(chat_id)
    keyboard = [
        [InlineKeyboardButton(">50%", callback_data='50')],
        [InlineKeyboardButton(">30%", callback_data='30')],
        [InlineKeyboardButton(">10%", callback_data='10')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∫–æ–ª–µ–±–∞–Ω–∏–π –∫–æ—Ç–∏—Ä–æ–≤–æ–∫, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã:",
        reply_markup=reply_markup
    )

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    threshold = float(query.data)
    update_user_thresholds(chat_id, threshold)
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    thresholds = get_user_thresholds(chat_id)
    threshold_text = ", ".join([f">{t}%" for t in thresholds]) if thresholds else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: {threshold_text}.")

def report(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    thresholds = get_user_thresholds(chat_id)
    if not thresholds:
        update.message.reply_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return
    ticker_data = get_ticker_data()
    if not ticker_data:
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    new_drops, recovered_coins = find_significant_drops(ticker_data, thresholds, chat_id)
    message = ""
    if new_drops:
        message += "üìâ –ù–∞–π–¥–µ–Ω—ã –º–æ–Ω–µ—Ç—ã —Å —Ä–µ–∑–∫–∏–º –ø–∞–¥–µ–Ω–∏–µ–º:\n"
        for threshold, coins in new_drops.items():
            message += f"\nüîπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ {threshold}%:\n"
            for coin in coins:
                message += f"‚Ä¢ {coin['name']} - –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {coin['volume']}\n"
    if recovered_coins:
        message += "\nüìà –ú–æ–Ω–µ—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –≤—ã—à–µ:\n"
        for coin in recovered_coins:
            message += f"‚Ä¢ {coin}\n"
    if not message:
        message = "–ù–µ—Ç –º–æ–Ω–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º."
    update.message.reply_text(message)
